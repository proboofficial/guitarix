#! /usr/bin/env python
# encoding: utf-8
import os, os.path, sys 


def options(opt):
    pass

def mm2obj(task):
    env = task.env
    if env['OS'] == 'darwin':
        mm_file = task.inputs[0].abspath()
        obj_file = task.outputs[0].abspath()

        cairo_include = env['CAIRO_INCLUDES'][0] if 'CAIRO_INCLUDES' in env and env['CAIRO_INCLUDES'] else '/opt/homebrew/include/cairo'

        clang = env.CXX[0] if isinstance(env.CXX, list) else env.CXX

        cmd = f"""
        {clang} -c -std=c++17 -ObjC++ -fPIC \
            -I. \
            -Iheader \
            -Iheader/widgets \
            -Iheader/dialogs \
            -Iresources \
            -I{cairo_include} \
            {mm_file} -o {obj_file}
        """

        return task.exec_command(cmd, shell=True, cwd=task.generator.path.abspath())
    else:
        return 1

def configure(conf):
    if not conf.env.LV2GUI:
        return None
    opt = conf.options
    env = conf.env
    conf.check_cfg(package='cairo', args=conf.env['OS_CAIRO_CFGFLAGS'], uselib_store='CAIRO', mandatory=1)
    if conf.env['OS'] == 'win32':
        # workaround: "-liconv" required at end of linker cmdline
        conf.env.append_value('STLIB_CAIRO', ['iconv'])
    elif conf.env['OS'] == 'darwin':
       
        conf.env.append_value('LINKFLAGS', ['-framework', 'Cocoa'])
    else:
        conf.check(lib='X11', uselib_store='X11', mandatory=True) and \
        conf.check(header_name = 'X11/Xlib.h', uselib_store = 'X11', mandatory=1)

def build(bld):
    if not (bld.env.LV2GUI):
        return None

    images = bld.path.ant_glob('resources/*.png')
    targ = (''.join([' ./resources/%s.o'% os.path.splitext(v.name)[0] for v in images]))
    resources = targ.split()

    sources = bld.path.ant_glob('*.cpp')
    sources += bld.path.ant_glob('widgets/*.cpp')
    sources += bld.path.ant_glob('dialogs/*.cpp')
    if sys.platform == 'darwin':
        mm_src = bld.path.find_node('xwidget-cocoa.mm')
        mm_obj = bld.bldnode.make_node('src/LV2/xputty/xwidget-cocoa.o')
        bld(rule=mm2obj,
            source=mm_src,
            target=mm_obj)
        sources.append(mm_obj)
    sources += resources
    
    prog = bld(
        features=['cxx', 'cxxstlib'],
        name = 'xcairo',
        includes = ['.','./header','./header/widgets','./header/dialogs','./resources','./xdgmime'],
        export_includes = ['..'],
        source = sources,
        uselib = ['X11', 'CAIRO','GTK'],
        cxxflags=['-fPIC'],
        target = 'xcairo',
        use = 're_sources',
        )
    prog.install_path = None

